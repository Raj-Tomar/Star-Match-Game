================================================================================================
Git Basic Commands
	git init
	git add .
	git commit -m "my commit"
	git remote add origin <remote repository URL>
	
	git branch -M main
	git push -u origin main
		OR
	git push origin <remote branch name>
	
	 main is now named master 
	 If you have a local clone, you can update it by running:
		git branch -m main master
		git fetch origin
		git branch -u origin/master master
	
	Renaming local and remote
	
		# Rename the local branch to the new name
		git branch -m <old_name> <new_name>

		# Delete the old branch on remote - where <remote> is, for example, origin
		git push <remote> --delete <old_name>

		# Or shorter way to delete remote branch [:]
		git push <remote> :<old_name>

		# Prevent git from using the old name when pushing in the next step.
		# Otherwise, git will use the old upstream name instead of <new_name>.
		git branch --unset-upstream <old_name>

		# Push the new branch to remote
		git push <remote> <new_name>

		# Reset the upstream branch for the new_name local branch
		git push <remote> -u <new_name>
================================================================================================
ReactJS
================================================================================================
Overview:
	React's design concepts
	JSX and event handlers, data and APIs
	React hooks
	Communicating between components
	Creating a local development environment for ReactJS
	
================================================================================================

Setting up a Development Environment
	
	Multiple Tools
		- APIs
		- Configurations
		- Releases
	
	Multipls Environment
		- Development
		- Production 
	
	Different Renderers
		- DOM
		- SSR
	
	Download Node.js
		- To run npm (Node Package Manager)
		- Verify
			npm -v
			npx -v

	create-react-app 
		npm i -g create-react-app && create-react-app <app-name>
		Better way
		npx create-react-app <app-name>
		
		npm run eject
			Copy all the configuration
			Creates config directory and script directory
		NOTE: Create React App 2+ supports TypeScript, Sass, CSS Modules and more without ejecting: https://reactjs.org/blog/2018/10/01/create-react-app-v2.html
		
	Installing Environment Dependencies
		https://jscomplete.com/reactful
		
		mkdir <dir-name>
		cd <dir-name>
		npm init (asks few questions)
		npm init -y (for default options)
		
		Installing Main Dependencies
			npm i express (Express is framework to create Node.js Server)
			This web server is used for Server side rendering
		
		The Front end Dependencies React and React-DOM
			npm i react react-dom
		
		Webpack (Module bundler - For Shipping all module in single bundle)
			npm i webpack webpack-cli
		
		Babel 
			npm i babel-loader @babel/code @babel/node @babel/preset-env @babel/preset-react
		
		Installing Development Dependencies
			npm i -D nodemon (Automatically restart node when we change something)
			npm i -D eslint babel-eslint eslint-plugin-react (Analyzes the code (Style/formatting) and tell about errors/probles)
			
	
	Configure Your Own Environment
		
		create .eslintrc.js file under project folder and use below code:
			module.exports = {
			  parser: 'babel-eslint',
			  env: {
				browser: true,
				commonjs: true,
				es6: true,
				node: true,
				jest: true,
			  },
			  parserOptions: {
				ecmaVersion: 2020,
				ecmaFeatures: {
				  impliedStrict: true,
				  jsx: true,
				},
				sourceType: 'module',
			  },
			  plugins: ['react', 'react-hooks'],
			  extends: [
				'eslint:recommended',
				'plugin:react/recommended',
				'plugin:react-hooks/recommended',
			  ],
			  settings: {
				react: {
				  version: 'detect',
				},
			  },
			  rules: {
				// You can do your customizations here...
				// For example, if you don't want to use the prop-types package,
				// you can turn off that recommended rule with: 'react/prop-types': ['off']
			  },
			};
		
		For Automatically Formatting 
			Install Prettier in Visual Code Studio
		
		Creating an Initial Directory Structure
			fulljs
				dist/
					main.js
				src/
					index.js
					components/
						App.js
					server/
						server.js
		
		Configure Webpack and Babel
			
			Create babel.config.js file under Project Folder
				module.exports = {
				  presets: ['@babel/preset-env', '@babel/preset-react'],
				};
			Create webpack.config.js file under Project Folder
				module.exports = {
				  module: {
					rules: [
					  {
						test: /\.js$/,
						exclude: /node_modules/,
						use: {
						  loader: 'babel-loader',
						},
					  },
					],
				  },
				};
		
		Create npm Script for Development	
			// In package.json
			scripts: {
				"test": "jest",
				"dev:server": "nodemon --exec babel-node src/server/server.js --ignore dist/",
				"dev:bundler": "webpack -w --mode=development"
			}
	
	Testing Everything with a Sample React Application
		
		src/components/App.js
			import React, { useState } from 'react';

			export default function App() {
			  const [count, setCount] = useState(0);
			  return (
				<div>
				  This is a sample stateful and server-side
				  rendered React application.
				  <br />
				  <br />
				  Here is a button that will track
				  how many times you click it:
				  <br />
				  <br />
				  <button onClick={() => setCount(count + 1)}>{count}</button>
				</div>
			  );
			}
		
		src/index.js
			import React from 'react';
			import ReactDOM from 'react-dom';

			import App from './components/App';

			ReactDOM.hydrate(
			  <App />,
			  document.getElementById('mountNode'),
			);
		
		src/server/server.js
			import express from 'express';
			import React from 'react';
			import ReactDOMServer from 'react-dom/server';
			import App from '../components/App';

			const server = express();
			server.use(express.static('dist'));

			server.get('/', (req, res) => {
			  const initialMarkup = ReactDOMServer.renderToString(<App />);

			  res.send(`
				<html>
				  <head>
					<title>Sample React App</title>
				  </head>
				  <body>
					<div id="mountNode">${initialMarkup}</div>
					<script src="/main.js"></script>
				  </body>
				</html>
			  `)
			});

			server.listen(4242, () => console.log('Server is running...'));
		
		Thatâ€™s it. If you run both npm dev:server and dev:bundler scripts (in 2 separate terminals):
			$ npm run dev:server
			$ npm run dev:bundler
		For Reference
			https://github.com/jscomplete/rgs-template
			
	
	Reactful
		npx reactful star-match
		Copy star-match code to App.js
	
	
	Structuring Component Files
		Create all the components separately
		Follow below link:
			https://github.com/jscomplete/rgs-star-match
================================================================================================
The Basics:
	
	React Commonly Faced Problems
		https://jscomplete.com/learn/react-beyond-basics/react-cfp
	
	Why React?
		https://jscomplete.com/learn/react-beyond-basics/why-react
		A JavaScript library for building user interfaces
		React is "declarative"
		HTML
			Declarative for static content
		React
			Declarative for dynamic data
		
		Framworks
			Limited flexibility
				- Do things a certain way
				- Hard to deviate
			Large and full of features
				- Hard to customize
				- Use the whole thing
				
		Why React is so popular?
			The "Virtual" browser (vs. DOM API)
			Just JavaScript
			React Native (for the win)
			Battle-tested
			Declarative language (model UI and state)
		
	React's Basic Concepts
		1. Components
			- Like functions
			- Input: props, state | Output: UI
			- Reusable and composable
			- <Component/>
			- Can manage a private state
		2. Reactive updates
			- React will react
			- Take updates to the browser
		3. Virial view in memory
			- Generate HTML using JavaScript
			- No HTML template language
			- Tree recognition
	
	React Components
		Function Component (Uses Props)
			const MyComponent = (props) => {
				return (
					<domElementOrComponent .../>
				);
			}
			Note: props(immutable) values are fixed.
		Class Component (Uses State)
			class MyComponent extends React.Component {
				render() {
					return (
						<domElementOrComponent .../>
					);
				}
			}
			Note: state value can be changed
			
	First React Component
		To Create the ReactJS app
			npx create-react-app my-app
			cd my-app
			npm start
		https://jscomplete.com/playground
		https://jscomplete.com/playground/rgs1.1
		
		function Button () {
			return <button>Test</button>;
		}
		export default Button;
		
		
	First React Hook
		
		useState is called Hook 
		useState() results:
			a. state object (getter)
			b. updater function (setter)
			
			[a, b] = useState()
			
		import React, {useState} from 'react';

		function Button () {
			// [a, b] = useState();
			// [counter, setCounter] = useState();
			
			const [counter, setCounter] = useState(0);
			
			return (
				<button onClick={() => setCounter(counter + 1)}>
					{counter}
				</button>
			) ;
		}
		export default Button;
		
	One-Way Data Flow
	
		App.js
			function App() {
			  const [counter, setCounter] = useState(50);
			  const incrementCounter = () => setCounter(counter+1);
			  return (
				<div className="App">
				  <Hello/>
				  <Button onClickFunction = {incrementCounter}/>
				  <Display message={counter}/>
				</div>
			  );
			}
		
		Button.js
			function Button (props) {
				return (
					<button onClick={props.onClickFunction}>
						+1
					</button>
				) ;
			}
		Display.js
			function Display (props) {    
				return (
				   <div>{props.message}</div>
				) ;
			}
	
	Components Reusability
		Button Component
			function Button (props) {
				const handleClick = () => props.onClickFunction(props.increment);
				return (
					<button onClick={handleClick}>
						+{props.increment}
					</button>
				) ;
			}
		
		App Component
			function App() {
			  const [counter, setCounter] = useState(0);
			  const incrementCounter = (incrementValue) => setCounter(counter+incrementValue);
			  return (
				<div className="App">
				  <Hello/>
				  <Button onClickFunction = {incrementCounter} increment = {1}/>
				  <Button onClickFunction = {incrementCounter} increment = {5}/>
				  <Button onClickFunction = {incrementCounter} increment = {10}/>
				  <Button onClickFunction = {incrementCounter} increment = {20}/>
				  <Display message={counter}/>
				</div>
			  );
			}
	
	Tree Reconciliation in Action
		https://jscomplete.com/playground/rgs1.7
		
		ReconciliationUsingHTML
			function ReconciliationUsingHTML () {
				return (
					<div>
						<div>Hello HTML</div>
						<input/>
						<pre>{(new Date).toLocaleTimeString()}</pre>
					</div>
				);
			}
		
		ReconciliationUsingReact
			function ReconciliationUsingReact () {
				return (
					React.createElement('div', null, 'Hello React ',
					React.createElement('input', null),
					React.createElement('pre', null, (new Date().toLocaleTimeString())),
					)
				);
			}
		
		User both Reconciliation in setInterval to render the Time.
================================================================================================================
Modern JavaScript Crash Course

================================================================================================================

The Github Cards App
	https://jscomplete.com/playground/rgs2.1
	https://jscomplete.com/playground/rgs2.2

================================================================================================================

The Star Match Game

	Links:
		https://jscomplete.com/p/star-match/embed?preview=1
		https://jscomplete.com/playground/rgs3.1
		https://jscomplete.com/playground/rgs3.2
		https://jscomplete.com/playground/rgs3.3
		...
		https://jscomplete.com/playground/rgs3.5
		https://jscomplete.com/playground/rgs3.7
		https://jscomplete.com/playground/rgs3.8
		https://jscomplete.com/playground/rgs3.9
	
	Notes:
		Be aware of top level of JavaScript Objects and dont override them.
			e.g: Number
		
		How every click of Number button is working?
			https://jscomplete.com/closures
		
		For every behaviour in React, there are two aspect:
			1. App logic to change state
			2. UI logic to describe state
		
	
	Rerendering Problems:
		https://jscomplete.com/rgs-hooks
	
	No Ifs:
		https://jscomplete.com/no-ifs
		
	Rule of Hooks:
		Don't call Hooks inside loop or conditions